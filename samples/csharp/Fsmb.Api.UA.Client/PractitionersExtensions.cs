// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fsmb.Api.Ua.Client
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Practitioners.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public static partial class PractitionersExtensions
    {
            /// <summary>
            /// Gets the submissions for a practitioner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='board'>
            /// Board code
            /// </param>
            /// <param name='fid'>
            /// FID of the practitioner
            /// </param>
            /// <param name='fromDate'>
            /// Optional from date to limit the submissions
            /// </param>
            /// <param name='toDate'>
            /// Optional to date to limit the submissions
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IEnumerable<Submission> GetByFid (this IPractitioners operations, string board, string fid, DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string orderBy = default(string), int? page = default(int?), int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((IPractitioners)s).GetByFidAsync(board, fid, fromDate, toDate, orderBy, page, pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the submissions for a practitioner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='board'>
            /// Board code
            /// </param>
            /// <param name='fid'>
            /// FID of the practitioner
            /// </param>
            /// <param name='fromDate'>
            /// Optional from date to limit the submissions
            /// </param>
            /// <param name='toDate'>
            /// Optional to date to limit the submissions
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Submission>> GetByFidAsync(this IPractitioners operations, string board, string fid, DateTime? fromDate = default(DateTime?), DateTime? toDate = default(DateTime?), string orderBy = default(string), int? page = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByFidWithHttpMessagesAsync(board, fid, fromDate, toDate, orderBy, page, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the current submission for a practitioner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='board'>
            /// Board code
            /// </param>
            /// <param name='fid'>
            /// FID of the practitioner
            /// </param>
            public static Submission GetLatest(this IPractitioners operations, string board, string fid)
            {
                return Task.Factory.StartNew(s => ((IPractitioners)s).GetLatestAsync(board, fid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current submission for a practitioner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='board'>
            /// Board code
            /// </param>
            /// <param name='fid'>
            /// FID of the practitioner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Submission> GetLatestAsync(this IPractitioners operations, string board, string fid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestWithHttpMessagesAsync(board, fid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the current submission for a practitioner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='board'>
            /// Board code
            /// </param>
            /// <param name='fid'>
            /// FID of the practitioner
            /// </param>
            public static Submission GetById ( this IPractitioners operations, string board, string fid, long id )
            {
                return Task.Factory.StartNew(s => ((IPractitioners)s).GetByIdAsync(board, fid, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current submission for a practitioner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='board'>
            /// Board code
            /// </param>
            /// <param name='fid'>
            /// FID of the practitioner
            /// </param>
            /// <param name='id'>
            /// Submission ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Submission> GetByIdAsync ( this IPractitioners operations, string board, string fid, long id, CancellationToken cancellationToken = default(CancellationToken) )
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(board, fid, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }
    }
}
