// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fsmb.Api.Ua.Client.Models
{
    /// <summary>PDC ABMS certification</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PdcAbmsCertification
    {
        /// <summary>Report date</summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime ReportDate { get; set; }

        /// <summary>Certifying board</summary>
        [Newtonsoft.Json.JsonProperty("boardName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string BoardName { get; set; }

        /// <summary>Certificate name</summary>
        [Newtonsoft.Json.JsonProperty("certificateName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string CertificateName { get; set; }

        /// <summary>Meets MOC requirements (e.g. Yes, No, Not Required)</summary>
        [Newtonsoft.Json.JsonProperty("meetsMocRequirements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string MeetsMocRequirements { get; set; }

        /// <summary>Is certified?</summary>
        [Newtonsoft.Json.JsonProperty("isCertified", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCertified { get; set; }

        /// <summary>Status of certificate (e.g. Active, Inactive, Expired)</summary>
        [Newtonsoft.Json.JsonProperty("certificateStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateStatus { get; set; }

        /// <summary>Type of certificate (e.g. General, Subspecialty)</summary>
        [Newtonsoft.Json.JsonProperty("certificateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string CertificateType { get; set; }

        /// <summary>Duration of the certificate (e.g. Lifetime, MOC, Time Limited)</summary>
        [Newtonsoft.Json.JsonProperty("certificateDuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string CertificateDuration { get; set; }

        /// <summary>Type of occurrence (e.g. Initial, Recertification, Designation)</summary>
        [Newtonsoft.Json.JsonProperty("occurrenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string OccurrenceType { get; set; }

        /// <summary>Effective date</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartialDate EffectiveDate { get; set; }

        /// <summary>Expiration date</summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartialDate ExpirationDate { get; set; }

        /// <summary>Reverification date</summary>
        [Newtonsoft.Json.JsonProperty("reverificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReverificationDate { get; set; }

        /// <summary>MOC pathway Id</summary>
        [Newtonsoft.Json.JsonProperty("mocPathwayId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MocPathwayId { get; set; }

        /// <summary>MOC pathway name</summary>
        [Newtonsoft.Json.JsonProperty("mocPathwayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MocPathwayName { get; set; }

        /// <summary>Occupation status (e.g. R)</summary>
        [Newtonsoft.Json.JsonProperty("occupationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationStatus { get; set; }

        /// <summary>Occupation status notification year</summary>
        [Newtonsoft.Json.JsonProperty("occupationStatusNotifyYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d{4}")]
        public string OccupationStatusNotifyYear { get; set; }


    }
}