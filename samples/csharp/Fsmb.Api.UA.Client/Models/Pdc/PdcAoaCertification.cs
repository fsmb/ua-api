// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fsmb.Api.Ua.Client.Models
{
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PdcAoaCertification
    {
        /// <summary>AOA ID</summary>
        [Newtonsoft.Json.JsonProperty("aoaId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string AoaId { get; set; }

        /// <summary>Report date</summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime ReportDate { get; set; }

        /// <summary>Board name</summary>
        [Newtonsoft.Json.JsonProperty("boardName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string BoardName { get; set; }

        /// <summary>Certification name</summary>
        [Newtonsoft.Json.JsonProperty("certificationName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string CertificationName { get; set; }

        /// <summary>Certification status (e.g. Active, Inactive, Retired, Deceased)</summary>
        [Newtonsoft.Json.JsonProperty("certificationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificationStatus { get; set; }

        /// <summary>Certification type (e.g. Primary, Subspecialty)</summary>
        [Newtonsoft.Json.JsonProperty("certificationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = false)]
        public string CertificationType { get; set; }

        /// <summary>Is OCC participating</summary>
        [Newtonsoft.Json.JsonProperty("isOccParticipating", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOccParticipating { get; set; }

        /// <summary>Is OCC required</summary>
        [Newtonsoft.Json.JsonProperty("isOccRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOccRequired { get; set; }

        /// <summary>Certification issue date</summary>
        [Newtonsoft.Json.JsonProperty("certificationIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CertificationIssueDate { get; set; }

        /// <summary>Certification end date</summary>
        [Newtonsoft.Json.JsonProperty("certificationEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CertificationEndDate { get; set; }

        /// <summary>Recertification issue date</summary>
        [Newtonsoft.Json.JsonProperty("recertificationIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RecertificationIssueDate { get; set; }

        /// <summary>Recertification expire date</summary>
        [Newtonsoft.Json.JsonProperty("recertificationExpireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RecertificationExpireDate { get; set; }


    }
}