// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fsmb.Apis.Ua.Clients.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Activity information
    /// </summary>
    public partial class Activity
    {
        /// <summary>
        /// Initializes a new instance of the Activity class.
        /// </summary>
        public Activity() { }

        /// <summary>
        /// Initializes a new instance of the Activity class.
        /// </summary>
        public Activity(string type, string description, string id = default(string), bool? inProgress = default(bool?), DateTime? beginDate = default(DateTime?), DateTime? endDate = default(DateTime?), IList<string> addressLines = default(IList<string>), string city = default(string), Region stateOrProvince = default(Region), string postalCode = default(string), string position = default(string), string department = default(string), bool? wasEmployed = default(bool?), bool? hadStaffPrivileges = default(bool?), bool? wasAffiliated = default(bool?), int? percentageClinical = default(int?), int? percentageAdministrative = default(int?))
        {
            Id = id;
            Type = type;
            InProgress = inProgress;
            BeginDate = beginDate;
            EndDate = endDate;
            Description = description;
            AddressLines = addressLines;
            City = city;
            StateOrProvince = stateOrProvince;
            PostalCode = postalCode;
            Position = position;
            Department = department;
            WasEmployed = wasEmployed;
            HadStaffPrivileges = hadStaffPrivileges;
            WasAffiliated = wasAffiliated;
            PercentageClinical = percentageClinical;
            PercentageAdministrative = percentageAdministrative;
        }

        /// <summary>
        /// ID of the activity
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Type of activity
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Is in progress?
        /// </summary>
        [JsonProperty(PropertyName = "inProgress")]
        public bool? InProgress { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        [JsonProperty(PropertyName = "beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        [JsonProperty(PropertyName = "endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Address lines
        /// </summary>
        [JsonProperty(PropertyName = "addressLines")]
        public IList<string> AddressLines { get; set; }

        /// <summary>
        /// City
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// State/province
        /// </summary>
        [JsonProperty(PropertyName = "stateOrProvince")]
        public Region StateOrProvince { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Position
        /// </summary>
        [JsonProperty(PropertyName = "position")]
        public string Position { get; set; }

        /// <summary>
        /// Department
        /// </summary>
        [JsonProperty(PropertyName = "department")]
        public string Department { get; set; }

        /// <summary>
        /// Was employee?
        /// </summary>
        [JsonProperty(PropertyName = "wasEmployed")]
        public bool? WasEmployed { get; set; }

        /// <summary>
        /// Had staff privileges?
        /// </summary>
        [JsonProperty(PropertyName = "hadStaffPrivileges")]
        public bool? HadStaffPrivileges { get; set; }

        /// <summary>
        /// Was affiliated?
        /// </summary>
        [JsonProperty(PropertyName = "wasAffiliated")]
        public bool? WasAffiliated { get; set; }

        /// <summary>
        /// % clinical
        /// </summary>
        [JsonProperty(PropertyName = "percentageClinical")]
        public int? PercentageClinical { get; set; }

        /// <summary>
        /// % administrative
        /// </summary>
        [JsonProperty(PropertyName = "percentageAdministrative")]
        public int? PercentageAdministrative { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (this.StateOrProvince != null)
            {
                this.StateOrProvince.Validate();
            }
        }
    }
}
