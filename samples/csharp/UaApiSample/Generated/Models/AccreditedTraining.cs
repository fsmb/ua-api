// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fsmb.Apis.Ua.Clients.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Accredited training information
    /// </summary>
    public partial class AccreditedTraining
    {
        /// <summary>
        /// Initializes a new instance of the AccreditedTraining class.
        /// </summary>
        public AccreditedTraining() { }

        /// <summary>
        /// Initializes a new instance of the AccreditedTraining class.
        /// </summary>
        public AccreditedTraining(string accreditationType, string programCode, Program program, Specialty specialty, string programType, string trainingStatus, DateTime? beginDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? percentageClinical = default(int?), int? percentageAdministrative = default(int?))
        {
            AccreditationType = accreditationType;
            ProgramCode = programCode;
            Program = program;
            Specialty = specialty;
            ProgramType = programType;
            TrainingStatus = trainingStatus;
            BeginDate = beginDate;
            EndDate = endDate;
            PercentageClinical = percentageClinical;
            PercentageAdministrative = percentageAdministrative;
        }

        /// <summary>
        /// The type of accreditation (e.g. ACGME, AOA)
        /// </summary>
        [JsonProperty(PropertyName = "accreditationType")]
        public string AccreditationType { get; set; }

        /// <summary>
        /// Program code
        /// </summary>
        [JsonProperty(PropertyName = "programCode")]
        public string ProgramCode { get; set; }

        /// <summary>
        /// Program
        /// </summary>
        [JsonProperty(PropertyName = "program")]
        public Program Program { get; set; }

        /// <summary>
        /// Specialty
        /// </summary>
        [JsonProperty(PropertyName = "specialty")]
        public Specialty Specialty { get; set; }

        /// <summary>
        /// Program type
        /// </summary>
        [JsonProperty(PropertyName = "programType")]
        public string ProgramType { get; set; }

        /// <summary>
        /// Training status
        /// </summary>
        [JsonProperty(PropertyName = "trainingStatus")]
        public string TrainingStatus { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        [JsonProperty(PropertyName = "beginDate")]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        [JsonProperty(PropertyName = "endDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Percentage of training that was Clinical
        /// </summary>
        [JsonProperty(PropertyName = "percentageClinical")]
        public int? PercentageClinical { get; set; }

        /// <summary>
        /// Percentage of training that was Administrative
        /// </summary>
        [JsonProperty(PropertyName = "percentageAdministrative")]
        public int? PercentageAdministrative { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (AccreditationType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccreditationType");
            }
            if (ProgramCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProgramCode");
            }
            if (Program == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Program");
            }
            if (Specialty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Specialty");
            }
            if (ProgramType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProgramType");
            }
            if (TrainingStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TrainingStatus");
            }
            if (this.Program != null)
            {
                this.Program.Validate();
            }
            if (this.Specialty != null)
            {
                this.Specialty.Validate();
            }
        }
    }
}
